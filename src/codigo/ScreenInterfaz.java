package codigo;


import codigo.LexerCup;
import codigo.Sintax;
import java.awt.Color;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.io.PrintWriter;
import java.io.Reader;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import java.io.IOException;
import java.io.StringReader;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java_cup.runtime.*;
import org.fife.ui.rsyntaxtextarea.RSyntaxTextArea;
import org.fife.ui.rsyntaxtextarea.SyntaxConstants;
import org.fife.ui.rtextarea.RTextScrollPane;

/**
 *
 * @author Roman C.S
 */
public class ScreenInterfaz extends javax.swing.JFrame {

    /**
     * Creates new form ScreenInterfaz
     */
    RSyntaxTextArea AreaArchivo = new RSyntaxTextArea();
    File archivoGuardado;
    //CheckExpReg Validador;
    
    public ScreenInterfaz() {
        initComponents();
        initMyComponents();
        rsyntax();
    }
    
    /*public boolean ValidarExpresion(String ExpRegular, String texto){
        Pattern pat = Pattern.compile(ExpRegular);
        Matcher mat = pat.matcher(texto);
        return mat.matches();
    }*/
    public void rsyntax(){
        
        RTextScrollPane sp = new RTextScrollPane (AreaArchivo);
        jPanelprincipal.add(sp);
        AreaArchivo.setSyntaxEditingStyle(SyntaxConstants.SYNTAX_STYLE_JAVA);
        AreaArchivo.setEditable(true);
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    private void initMyComponents(){
        TextNomArch.setEditable(false);
        //TextExpRe.setEditable(false); Borrado no me sirve en esta version
        AreaArchivo.setEditable(true);
        BtnNewFile.setEnabled(false);
        //BtnCompExp.setEnabled(false); Borrado no me sirve en esta version
        AreaArchivo.setText("");
        TextNomArch.setText("'Seleccione un archivo de texto'");
        BtnSelecArch.setEnabled(true);
        txtResultado.setEditable(false);
        txtSintaxis.setEditable(false);
        BAnalizar.setEnabled(true);
        txtResultado.setText("");
        txtSintaxis.setText("");
        
    }
    public void setArchivo(File documento){
        this.archivoGuardado = documento;
    }
    
    public File getArchivo(){
        return this.archivoGuardado;
    }
    
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList<>();
        TextNomArch = new javax.swing.JTextField();
        BtnSelecArch = new javax.swing.JButton();
        BtnNewFile = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtResultado = new javax.swing.JTextArea();
        BAnalizar = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        txtSintaxis = new javax.swing.JTextArea();
        jPanelprincipal = new javax.swing.JPanel();

        jList1.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPane1.setViewportView(jList1);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        TextNomArch.setText("\"Seleccione un archivo de texto\"");

        BtnSelecArch.setText("Archivo");
        BtnSelecArch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnSelecArchActionPerformed(evt);
            }
        });

        BtnNewFile.setText("Nuevo");
        BtnNewFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnNewFileActionPerformed(evt);
            }
        });

        txtResultado.setColumns(20);
        txtResultado.setRows(5);
        jScrollPane2.setViewportView(txtResultado);

        BAnalizar.setText("Analizar");
        BAnalizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BAnalizarActionPerformed(evt);
            }
        });

        txtSintaxis.setColumns(20);
        txtSintaxis.setRows(5);
        jScrollPane3.setViewportView(txtSintaxis);

        jPanelprincipal.setLayout(new java.awt.CardLayout());

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanelprincipal, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(TextNomArch, javax.swing.GroupLayout.PREFERRED_SIZE, 455, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(BtnSelecArch, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(BtnNewFile, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(BAnalizar, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 389, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 385, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(TextNomArch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(BtnSelecArch)
                    .addComponent(BtnNewFile)
                    .addComponent(BAnalizar))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanelprincipal, javax.swing.GroupLayout.DEFAULT_SIZE, 372, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 201, Short.MAX_VALUE)
                    .addComponent(jScrollPane3))
                .addGap(32, 32, 32))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void BtnNewFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnNewFileActionPerformed
        initMyComponents();
    }//GEN-LAST:event_BtnNewFileActionPerformed

    private void BtnSelecArchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnSelecArchActionPerformed
        JFileChooser chooser = new JFileChooser();
        chooser.showOpenDialog(null);
        File archivo = new File(chooser.getSelectedFile().getAbsolutePath());
        
        try {
            String ST = new String(Files.readAllBytes(archivo.toPath()));
            AreaArchivo.setText(ST);
            BtnNewFile.setEnabled(true);
            BtnSelecArch.setEnabled(false);
            BAnalizar.setEnabled(true);
            TextNomArch.setText(archivo.getAbsolutePath());
            
        } catch (FileNotFoundException ex) {
            Logger.getLogger(ScreenInterfaz.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(ScreenInterfaz.class.getName()).log(Level.SEVERE, null, ex);
        }
        /*try {
            //Codigo del boton de seleccion del archivo
            JFileChooser selectorArchivo = new JFileChooser(); //Creo el FileChooser
            FileNameExtensionFilter filtro = new FileNameExtensionFilter("Archivos de texto", "txt");
            selectorArchivo.setFileFilter(filtro);
            
            selectorArchivo.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);
            int resultado = selectorArchivo.showOpenDialog(this);
            File archivo = selectorArchivo.getSelectedFile();
            //Muestra error si es invalido
            if((archivo == null)||(archivo.getName().equals(""))){ 
                JOptionPane.showMessageDialog(this,"Seleccione un archivo", "Seleccione un archivo", JOptionPane.ERROR_MESSAGE);
            }else{
                //Si selecciona un archivo valido
                //BtnCompExp.setEnabled(true);
                BtnNewFile.setEnabled(true);
                BtnSelecArch.setEnabled(false);
                BAnalizar.setEnabled(true);
                //TextExpRe.setEditable(true);
                setArchivo(archivo);
                
                TextNomArch.setText(archivo.getAbsolutePath());
                Scanner lector = new Scanner(archivo);
                while(lector.hasNext()){
                    AreaArchivo.insert(lector.nextLine()+"\n", AreaArchivo.getText().length());
                }
            }
        } catch (FileNotFoundException ex) {
            Logger.getLogger(ScreenInterfaz.class.getName()).log(Level.SEVERE, null, ex);
        }*/
        
        
    }//GEN-LAST:event_BtnSelecArchActionPerformed

    private void BAnalizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BAnalizarActionPerformed
        //Boton analizar-- Transcribir codigo
        // <editor-fold defaultstate="collapsed" desc="Codigo Viejo del Boton"> 
        /*File archivo = archivoGuardado;
        PrintWriter escribir;
        try{
            escribir = new PrintWriter(archivo);
            escribir.print(AreaArchivo.getText());
            escribir.close();
            
        }catch (FileNotFoundException ex){
            java.util.logging.Logger.getLogger(ScreenInterfaz.class.getName());
        }
        
        Reader lector;
        try{
            lector = new BufferedReader (new FileReader(archivo));
            Lexer lexer = new Lexer (lector);
            String resultado = "";
            while(true){
                Tokens tokens = lexer.yylex();
                if(tokens == null){
                    resultado += "Fin";
                    txtResultado.setText(resultado);
                    return;
                }
                switch (tokens){
                    case ERROR:
                        resultado += "Simbolo no definido\n";
                        break;
                    case Identificador: case Numero: case Reservadas:
                        resultado += lexer.lexeme + ": Dentro de " + tokens + "\n";
                        break;
                    default:
                        resultado += "Token: " + tokens + "\n";
                        break;
                }
            }
        } catch (FileNotFoundException ex) {
            Logger.getLogger(ScreenInterfaz.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(ScreenInterfaz.class.getName()).log(Level.SEVERE, null, ex);
        }*/// </editor-fold>
        
        try {
            //Crear clase con las reglas...
            
            analizarLexico();
            analizarSintaxis();
            
            } catch (FileNotFoundException ex) {
                java.util.logging.Logger.getLogger(ScreenInterfaz.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
            } catch (IOException ex) {
                java.util.logging.Logger.getLogger(ScreenInterfaz.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
            }
    }//GEN-LAST:event_BAnalizarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) throws Exception {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ScreenInterfaz.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ScreenInterfaz.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ScreenInterfaz.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ScreenInterfaz.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ScreenInterfaz().setVisible(true);
            }
        });
        
        System.out.println("Generando archivos Lexer");
        String ruta1 = "C:/Users/Roman C.S/Documents/NetBeansProjects/Compilador/src/codigo/lex.flex";
        String ruta2 = "C:/Users/Roman C.S/Documents/NetBeansProjects/Compilador/src/codigo/LexerCup.flex";
        String[] rutaS = {"-parser", "Sintax", "C:/Users/Roman C.S/Documents/NetBeansProjects/Compilador/src/codigo/Sintax.cup"};
        generar(ruta1, ruta2, rutaS);
        
        /*try{
           generar();
        }catch(Exception e){
           throw new Exception("Error al generar Archivo Lexer");
       }*/
        
    }
    

    public static void generar(String ruta1, String ruta2, String[]rutaS) throws IOException, Exception{
        File archivo;
        archivo = new File(ruta1);
        JFlex.Main.generate(archivo);
        archivo = new File(ruta2);
        JFlex.Main.generate(archivo);
        java_cup.Main.main(rutaS);
        
        Path rutaSym = Paths.get("C:/Users/Roman C.S/Documents/NetBeansProjects/Compilador/src/codigo/sym.java");
        if(Files.exists(rutaSym)){
            Files.delete(rutaSym);
        }
        Files.move(
               Paths.get("C:/Users/Roman C.S/Documents/NetBeansProjects/Compilador/sym.java"),
               Paths.get("C:/Users/Roman C.S/Documents/NetBeansProjects/Compilador/src/codigo/sym.java")
        );
        
        Path rutaSin = Paths.get("C:/Users/Roman C.S/Documents/NetBeansProjects/Compilador/src/codigo/Sintax.java");
        if (Files.exists(rutaSin)) {
            Files.delete(rutaSin);
        }
        Files.move(
                Paths.get("C:/Users/Roman C.S/Documents/NetBeansProjects/Compilador/Sintax.java"), 
                Paths.get("C:/Users/Roman C.S/Documents/NetBeansProjects/Compilador/src/codigo/Sintax.java")
        );
    }
    
    private void analizarLexico() throws IOException{
        int cont = 1;
        String expr = (String)AreaArchivo.getText();
        Lexer lexer = new Lexer (new StringReader(expr));
        String resultado = "LINEA "+ cont + "\t\tSimbolo\n";
        while (true){
            Tokens token = lexer.yylex();
            if(token == null){
                txtResultado.setText(resultado);
                return;
            }
            switch (token){
                case Linea:
                    cont++;
                    resultado += "LINEA " + cont + "\n";
                    break;
                case Comillas:
                    resultado += "  <Comillas>\t\t" + lexer.lexeme + "\n";
                    break;
                case Cadena:
                    resultado += "  <Tipo de dato>\t" + lexer.lexeme + "\n";
                    break;
                case T_dato:
                    resultado += "  <Tipo de dato>\t" + lexer.lexeme + "\n";
                    break;
                case If:
                    resultado += "  <Reservada if>\t" + lexer.lexeme + "\n";
                    break;
                case Else:
                    resultado += "  <Reservada else>\t" + lexer.lexeme + "\n";
                    break;
                case Do:
                    resultado += "  <Reservada do>\t" + lexer.lexeme + "\n";
                    break;
                case While:
                    resultado += "  <Reservada while>\t" + lexer.lexeme + "\n";
                    break;
                case For:
                    resultado += "  <Reservada for\t" + lexer.lexeme + "\n";
                    break;
                case Igual:
                    resultado += "  <Operador igual>\t" + lexer.lexeme + "\n";
                    break;
                case Suma:
                    resultado += "  <Operador suma>\t" + lexer.lexeme + "\n";
                    break;
                case Resta:
                    resultado += "  <Operador resta>\t" + lexer.lexeme + "\n";
                    break;
                case Multiplicacion:
                    resultado += "  <Operador multiplicacion>\t" + lexer.lexeme + "\n";
                    break;
                case Division:
                    resultado += "  <Operador division>\t" + lexer.lexeme + "\n";
                    break;
                case Op_logico:
                    resultado += "  <Operador logico\t" + lexer.lexeme + "\n";
                    break;
                case Op_incremento:
                    resultado += "  <Operador incremento>\t" + lexer.lexeme + "\n";
                    break;
                case Op_relacional:
                    resultado += "  <Operador relacional\t" + lexer.lexeme + "\n";
                    break;
                case Op_atribucion:
                    resultado += "  <Operador atribucion\t" + lexer.lexeme + "\n";
                    break;
                case Op_booleano:
                    resultado += "  <Operador booleano>\t" + lexer.lexeme + "\n";
                    break;
                case Parentesis_a:
                    resultado += "  <Parentesis de apertura>\t" + lexer.lexeme + "\n";
                    break;
                case Parentesis_c:
                    resultado += "  <Parentesis de cierre>\t" + lexer.lexeme + "\n";
                    break;
                case Llave_a:
                    resultado += "  <Llave de apertura>\t" + lexer.lexeme + "\n";
                    break;
                case Llave_c:
                    resultado += "  <Llave de cierre\t" + lexer.lexeme + "\n";
                    break;
                case Corchete_c:
                    resultado += "  <Corchete de cierre\t" + lexer.lexeme + "\n";
                    break;
                case Main:
                    resultado += "  <Reservada main>\t" + lexer.lexeme + "\n";
                    break;
                case P_coma:
                    resultado += "  <Punto y coma>\t" + lexer.lexeme + "\n";
                    break;
                case Identificador:
                    resultado += "  <Identificador>\t\t" + lexer.lexeme + "\n";
                    break;
                case Numero:
                    resultado += "  <Numero>\t\t" + lexer.lexeme + "\n";
                    break;
                case Coma_Simple:
                    resultado += "  <Coma>\t" + lexer.lexeme + "\n";
                    break;
                case Dos_Puntos:
                    resultado += "  <Dos Puntos>\t" + lexer.lexeme + "\n";
                    break;
                case ERROR:
                    resultado += "  <Simbolo no definido>\n";
                    break;
                default:
                    resultado += "  <" + lexer.lexeme + ">\n";
                    break;
            }
        }
    }
    
    private void analizarSintaxis() throws IOException{
        String ST = AreaArchivo.getText();
        Sintax s = new Sintax(new codigo.LexerCup(new StringReader(ST)));
        
        try {
            s.parse();
            txtSintaxis.setText("Analisis realizado correctamente");
            //txtAnalizarSin.setForeground(new Color(25, 111, 61));
        } catch (Exception ex) {
            Symbol sym = s.getS();
            txtSintaxis.setText("Error de sintaxis. Linea: " + (sym.right + 1) + " Columna: " + (sym.left + 1) + ", Texto: \"" + sym.value + "\"");
            //txtAnalizarSin.setForeground(Color.red);
        }
 }
    
    
    
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BAnalizar;
    private javax.swing.JButton BtnNewFile;
    private javax.swing.JButton BtnSelecArch;
    private javax.swing.JTextField TextNomArch;
    private javax.swing.JList<String> jList1;
    private javax.swing.JPanel jPanelprincipal;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTextArea txtResultado;
    private javax.swing.JTextArea txtSintaxis;
    // End of variables declaration//GEN-END:variables
}
