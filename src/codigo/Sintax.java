
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Fri Nov 26 14:00:48 CST 2021
//----------------------------------------------------

package codigo;

import java_cup.runtime.Symbol;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Fri Nov 26 14:00:48 CST 2021
  */
public class Sintax extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintax() {super();}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\075\000\002\002\004\000\002\002\011\000\002\002" +
    "\010\000\002\002\005\000\002\002\013\000\002\002\013" +
    "\000\002\003\004\000\002\003\003\000\002\003\004\000" +
    "\002\003\003\000\002\003\004\000\002\003\003\000\002" +
    "\003\004\000\002\003\003\000\002\003\004\000\002\003" +
    "\003\000\002\003\004\000\002\003\003\000\002\003\004" +
    "\000\002\003\003\000\002\004\004\000\002\004\005\000" +
    "\002\004\007\000\002\004\007\000\002\004\006\000\002" +
    "\004\006\000\002\004\005\000\002\004\007\000\002\004" +
    "\007\000\002\004\006\000\002\004\006\000\002\004\010" +
    "\000\002\004\010\000\002\004\011\000\002\004\011\000" +
    "\002\004\011\000\002\004\006\000\002\004\010\000\002" +
    "\004\006\000\002\004\012\000\002\004\010\000\002\004" +
    "\010\000\002\004\011\000\002\006\011\000\002\015\006" +
    "\000\002\015\005\000\002\013\003\000\002\013\005\000" +
    "\002\013\005\000\002\013\005\000\002\013\006\000\002" +
    "\013\007\000\002\007\015\000\002\010\011\000\002\011" +
    "\013\000\002\012\011\000\002\014\012\000\002\014\011" +
    "\000\002\005\005\000\002\005\004\000\002\005\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\272\000\010\007\007\032\004\036\005\001\002\000" +
    "\030\005\260\006\027\007\023\010\030\011\033\013\034" +
    "\014\035\015\014\020\032\032\025\042\020\001\002\000" +
    "\004\030\252\001\002\000\004\002\251\001\002\000\004" +
    "\036\010\001\002\000\004\030\011\001\002\000\004\031" +
    "\012\001\002\000\004\032\013\001\002\000\030\005\022" +
    "\006\027\007\023\010\030\011\033\013\034\014\035\015" +
    "\014\020\032\032\025\042\020\001\002\000\004\030\216" +
    "\001\002\000\034\005\ufff4\006\ufff4\007\ufff4\010\ufff4\011" +
    "\ufff4\013\ufff4\014\ufff4\015\ufff4\020\ufff4\032\ufff4\033\ufff4" +
    "\035\ufff4\042\ufff4\001\002\000\032\005\022\006\027\007" +
    "\023\010\030\011\033\013\034\014\035\015\014\020\032" +
    "\032\025\033\215\042\020\001\002\000\034\005\ufffa\006" +
    "\ufffa\007\ufffa\010\ufffa\011\ufffa\013\ufffa\014\ufffa\015\ufffa" +
    "\020\ufffa\032\ufffa\033\ufffa\035\ufffa\042\ufffa\001\002\000" +
    "\004\040\204\001\002\000\034\005\ufff8\006\ufff8\007\ufff8" +
    "\010\ufff8\011\ufff8\013\ufff8\014\ufff8\015\ufff8\020\ufff8\032" +
    "\ufff8\033\ufff8\035\ufff8\042\ufff8\001\002\000\004\042\166" +
    "\001\002\000\006\026\151\042\152\001\002\000\034\005" +
    "\ufff6\006\ufff6\007\ufff6\010\ufff6\011\ufff6\013\ufff6\014\ufff6" +
    "\015\ufff6\020\ufff6\032\ufff6\033\ufff6\035\ufff6\042\ufff6\001" +
    "\002\000\030\005\022\006\027\007\023\010\030\011\033" +
    "\013\034\014\035\015\014\020\032\032\025\042\020\001" +
    "\002\000\034\005\uffee\006\uffee\007\uffee\010\uffee\011\uffee" +
    "\013\uffee\014\uffee\015\uffee\020\uffee\032\uffee\033\uffee\035" +
    "\uffee\042\uffee\001\002\000\006\026\131\042\132\001\002" +
    "\000\004\042\111\001\002\000\034\005\ufff2\006\ufff2\007" +
    "\ufff2\010\ufff2\011\ufff2\013\ufff2\014\ufff2\015\ufff2\020\ufff2" +
    "\032\ufff2\033\ufff2\035\ufff2\042\ufff2\001\002\000\004\043" +
    "\110\001\002\000\004\030\076\001\002\000\004\032\066" +
    "\001\002\000\004\030\037\001\002\000\034\005\ufff0\006" +
    "\ufff0\007\ufff0\010\ufff0\011\ufff0\013\ufff0\014\ufff0\015\ufff0" +
    "\020\ufff0\032\ufff0\033\ufff0\035\ufff0\042\ufff0\001\002\000" +
    "\006\027\041\042\042\001\002\000\004\031\053\001\002" +
    "\000\006\031\uffd3\037\uffd3\001\002\000\004\024\043\001" +
    "\002\000\012\005\045\027\046\042\047\043\044\001\002" +
    "\000\006\031\uffd1\037\uffd1\001\002\000\006\005\050\042" +
    "\051\001\002\000\006\031\uffd2\037\uffd2\001\002\000\006" +
    "\031\uffd0\037\uffd0\001\002\000\006\031\uffcf\037\uffcf\001" +
    "\002\000\004\005\052\001\002\000\006\031\uffce\037\uffce" +
    "\001\002\000\004\032\054\001\002\000\030\005\022\006" +
    "\027\007\023\010\030\011\033\013\034\014\035\015\014" +
    "\020\032\032\025\042\020\001\002\000\032\005\022\006" +
    "\027\007\023\010\030\011\033\013\034\014\035\015\014" +
    "\020\032\032\025\033\061\042\020\001\002\000\034\005" +
    "\ufff5\006\ufff5\007\ufff5\010\ufff5\011\ufff5\013\ufff5\014\ufff5" +
    "\015\ufff5\020\ufff5\032\ufff5\033\ufff5\035\ufff5\042\ufff5\001" +
    "\002\000\034\005\ufffb\006\ufffb\007\ufffb\010\ufffb\011\ufffb" +
    "\013\ufffb\014\ufffb\015\ufffb\020\ufffb\032\ufffb\033\ufffb\035" +
    "\ufffb\042\ufffb\001\002\000\034\005\ufff9\006\ufff9\007\ufff9" +
    "\010\ufff9\011\ufff9\013\ufff9\014\ufff9\015\ufff9\020\ufff9\032" +
    "\ufff9\033\ufff9\035\ufff9\042\ufff9\001\002\000\034\005\uffcc" +
    "\006\uffcc\007\uffcc\010\uffcc\011\uffcc\013\uffcc\014\uffcc\015" +
    "\uffcc\020\uffcc\032\uffcc\033\uffcc\035\uffcc\042\uffcc\001\002" +
    "\000\034\005\ufff7\006\ufff7\007\ufff7\010\ufff7\011\ufff7\013" +
    "\ufff7\014\ufff7\015\ufff7\020\ufff7\032\ufff7\033\ufff7\035\ufff7" +
    "\042\ufff7\001\002\000\034\005\uffef\006\uffef\007\uffef\010" +
    "\uffef\011\uffef\013\uffef\014\uffef\015\uffef\020\uffef\032\uffef" +
    "\033\uffef\035\uffef\042\uffef\001\002\000\034\005\ufff3\006" +
    "\ufff3\007\ufff3\010\ufff3\011\ufff3\013\ufff3\014\ufff3\015\ufff3" +
    "\020\ufff3\032\ufff3\033\ufff3\035\ufff3\042\ufff3\001\002\000" +
    "\034\005\ufff1\006\ufff1\007\ufff1\010\ufff1\011\ufff1\013\ufff1" +
    "\014\ufff1\015\ufff1\020\ufff1\032\ufff1\033\ufff1\035\ufff1\042" +
    "\ufff1\001\002\000\030\005\022\006\027\007\023\010\030" +
    "\011\033\013\034\014\035\015\014\020\032\032\025\042" +
    "\020\001\002\000\032\005\022\006\027\007\023\010\030" +
    "\011\033\013\034\014\035\015\014\020\032\032\025\033" +
    "\070\042\020\001\002\000\004\014\071\001\002\000\004" +
    "\030\072\001\002\000\006\027\041\042\042\001\002\000" +
    "\004\031\074\001\002\000\004\037\075\001\002\000\034" +
    "\005\uffcb\006\uffcb\007\uffcb\010\uffcb\011\uffcb\013\uffcb\014" +
    "\uffcb\015\uffcb\020\uffcb\032\uffcb\033\uffcb\035\uffcb\042\uffcb" +
    "\001\002\000\006\027\041\042\042\001\002\000\004\031" +
    "\100\001\002\000\004\032\101\001\002\000\030\005\022" +
    "\006\027\007\023\010\030\011\033\013\034\014\035\015" +
    "\014\020\032\032\025\042\020\001\002\000\032\005\022" +
    "\006\027\007\023\010\030\011\033\013\034\014\035\015" +
    "\014\020\032\032\025\033\103\042\020\001\002\000\036" +
    "\005\uffd6\006\uffd6\007\uffd6\010\uffd6\011\uffd6\012\104\013" +
    "\uffd6\014\uffd6\015\uffd6\020\uffd6\032\uffd6\033\uffd6\035\uffd6" +
    "\042\uffd6\001\002\000\004\032\105\001\002\000\030\005" +
    "\022\006\027\007\023\010\030\011\033\013\034\014\035" +
    "\015\014\020\032\032\025\042\020\001\002\000\032\005" +
    "\022\006\027\007\023\010\030\011\033\013\034\014\035" +
    "\015\014\020\032\032\025\033\107\042\020\001\002\000" +
    "\034\005\uffcd\006\uffcd\007\uffcd\010\uffcd\011\uffcd\013\uffcd" +
    "\014\uffcd\015\uffcd\020\uffcd\032\uffcd\033\uffcd\035\uffcd\042" +
    "\uffcd\001\002\000\034\005\uffed\006\uffed\007\uffed\010\uffed" +
    "\011\uffed\013\uffed\014\uffed\015\uffed\020\uffed\032\uffed\033" +
    "\uffed\035\uffed\042\uffed\001\002\000\006\016\113\025\112" +
    "\001\002\000\004\005\123\001\002\000\004\005\114\001" +
    "\002\000\006\005\115\042\116\001\002\000\004\037\122" +
    "\001\002\000\004\005\117\001\002\000\006\037\120\041" +
    "\121\001\002\000\034\005\uffdf\006\uffdf\007\uffdf\010\uffdf" +
    "\011\uffdf\013\uffdf\014\uffdf\015\uffdf\020\uffdf\032\uffdf\033" +
    "\uffdf\035\uffdf\042\uffdf\001\002\000\034\005\uffde\006\uffde" +
    "\007\uffde\010\uffde\011\uffde\013\uffde\014\uffde\015\uffde\020" +
    "\uffde\032\uffde\033\uffde\035\uffde\042\uffde\001\002\000\034" +
    "\005\uffe1\006\uffe1\007\uffe1\010\uffe1\011\uffe1\013\uffe1\014" +
    "\uffe1\015\uffe1\020\uffe1\032\uffe1\033\uffe1\035\uffe1\042\uffe1" +
    "\001\002\000\006\005\124\042\125\001\002\000\004\037" +
    "\130\001\002\000\004\005\126\001\002\000\004\037\127" +
    "\001\002\000\034\005\uffe0\006\uffe0\007\uffe0\010\uffe0\011" +
    "\uffe0\013\uffe0\014\uffe0\015\uffe0\020\uffe0\032\uffe0\033\uffe0" +
    "\035\uffe0\042\uffe0\001\002\000\034\005\uffe2\006\uffe2\007" +
    "\uffe2\010\uffe2\011\uffe2\013\uffe2\014\uffe2\015\uffe2\020\uffe2" +
    "\032\uffe2\033\uffe2\035\uffe2\042\uffe2\001\002\000\004\042" +
    "\144\001\002\000\012\016\136\025\133\026\135\037\134" +
    "\001\002\000\004\043\142\001\002\000\034\005\uffe7\006" +
    "\uffe7\007\uffe7\010\uffe7\011\uffe7\013\uffe7\014\uffe7\015\uffe7" +
    "\020\uffe7\032\uffe7\033\uffe7\035\uffe7\042\uffe7\001\002\000" +
    "\004\037\141\001\002\000\004\043\137\001\002\000\004" +
    "\037\140\001\002\000\034\005\uffe5\006\uffe5\007\uffe5\010" +
    "\uffe5\011\uffe5\013\uffe5\014\uffe5\015\uffe5\020\uffe5\032\uffe5" +
    "\033\uffe5\035\uffe5\042\uffe5\001\002\000\034\005\uffe4\006" +
    "\uffe4\007\uffe4\010\uffe4\011\uffe4\013\uffe4\014\uffe4\015\uffe4" +
    "\020\uffe4\032\uffe4\033\uffe4\035\uffe4\042\uffe4\001\002\000" +
    "\004\037\143\001\002\000\034\005\uffe6\006\uffe6\007\uffe6" +
    "\010\uffe6\011\uffe6\013\uffe6\014\uffe6\015\uffe6\020\uffe6\032" +
    "\uffe6\033\uffe6\035\uffe6\042\uffe6\001\002\000\004\037\145" +
    "\001\002\000\034\005\uffe3\006\uffe3\007\uffe3\010\uffe3\011" +
    "\uffe3\013\uffe3\014\uffe3\015\uffe3\020\uffe3\032\uffe3\033\uffe3" +
    "\035\uffe3\042\uffe3\001\002\000\032\005\022\006\027\007" +
    "\023\010\030\011\033\013\034\014\035\015\014\020\032" +
    "\032\025\033\147\042\020\001\002\000\036\005\uffd4\006" +
    "\uffd4\007\uffd4\010\uffd4\011\uffd4\013\uffd4\014\uffd4\015\uffd4" +
    "\020\uffd4\032\uffd4\033\uffd4\035\uffd4\041\150\042\uffd4\001" +
    "\002\000\034\005\uffd5\006\uffd5\007\uffd5\010\uffd5\011\uffd5" +
    "\013\uffd5\014\uffd5\015\uffd5\020\uffd5\032\uffd5\033\uffd5\035" +
    "\uffd5\042\uffd5\001\002\000\004\042\164\001\002\000\012" +
    "\016\156\025\153\026\155\037\154\001\002\000\004\043" +
    "\162\001\002\000\034\005\uffec\006\uffec\007\uffec\010\uffec" +
    "\011\uffec\013\uffec\014\uffec\015\uffec\020\uffec\032\uffec\033" +
    "\uffec\035\uffec\042\uffec\001\002\000\004\037\161\001\002" +
    "\000\004\043\157\001\002\000\004\037\160\001\002\000" +
    "\034\005\uffea\006\uffea\007\uffea\010\uffea\011\uffea\013\uffea" +
    "\014\uffea\015\uffea\020\uffea\032\uffea\033\uffea\035\uffea\042" +
    "\uffea\001\002\000\034\005\uffe9\006\uffe9\007\uffe9\010\uffe9" +
    "\011\uffe9\013\uffe9\014\uffe9\015\uffe9\020\uffe9\032\uffe9\033" +
    "\uffe9\035\uffe9\042\uffe9\001\002\000\004\037\163\001\002" +
    "\000\034\005\uffeb\006\uffeb\007\uffeb\010\uffeb\011\uffeb\013" +
    "\uffeb\014\uffeb\015\uffeb\020\uffeb\032\uffeb\033\uffeb\035\uffeb" +
    "\042\uffeb\001\002\000\004\037\165\001\002\000\034\005" +
    "\uffe8\006\uffe8\007\uffe8\010\uffe8\011\uffe8\013\uffe8\014\uffe8" +
    "\015\uffe8\020\uffe8\032\uffe8\033\uffe8\035\uffe8\042\uffe8\001" +
    "\002\000\004\005\167\001\002\000\004\040\170\001\002" +
    "\000\012\005\172\020\174\027\173\043\171\001\002\000" +
    "\004\041\203\001\002\000\004\042\200\001\002\000\004" +
    "\041\177\001\002\000\004\043\175\001\002\000\004\041" +
    "\176\001\002\000\034\005\uffd7\006\uffd7\007\uffd7\010\uffd7" +
    "\011\uffd7\013\uffd7\014\uffd7\015\uffd7\020\uffd7\032\uffd7\033" +
    "\uffd7\035\uffd7\042\uffd7\001\002\000\034\005\uffd8\006\uffd8" +
    "\007\uffd8\010\uffd8\011\uffd8\013\uffd8\014\uffd8\015\uffd8\020" +
    "\uffd8\032\uffd8\033\uffd8\035\uffd8\042\uffd8\001\002\000\004" +
    "\005\201\001\002\000\004\041\202\001\002\000\034\005" +
    "\uffda\006\uffda\007\uffda\010\uffda\011\uffda\013\uffda\014\uffda" +
    "\015\uffda\020\uffda\032\uffda\033\uffda\035\uffda\042\uffda\001" +
    "\002\000\034\005\uffd9\006\uffd9\007\uffd9\010\uffd9\011\uffd9" +
    "\013\uffd9\014\uffd9\015\uffd9\020\uffd9\032\uffd9\033\uffd9\035" +
    "\uffd9\042\uffd9\001\002\000\010\005\206\027\207\043\205" +
    "\001\002\000\004\041\214\001\002\000\004\042\211\001" +
    "\002\000\004\041\210\001\002\000\034\005\uffdb\006\uffdb" +
    "\007\uffdb\010\uffdb\011\uffdb\013\uffdb\014\uffdb\015\uffdb\020" +
    "\uffdb\032\uffdb\033\uffdb\035\uffdb\042\uffdb\001\002\000\004" +
    "\005\212\001\002\000\004\041\213\001\002\000\034\005" +
    "\uffdc\006\uffdc\007\uffdc\010\uffdc\011\uffdc\013\uffdc\014\uffdc" +
    "\015\uffdc\020\uffdc\032\uffdc\033\uffdc\035\uffdc\042\uffdc\001" +
    "\002\000\034\005\uffdd\006\uffdd\007\uffdd\010\uffdd\011\uffdd" +
    "\013\uffdd\014\uffdd\015\uffdd\020\uffdd\032\uffdd\033\uffdd\035" +
    "\uffdd\042\uffdd\001\002\000\004\002\000\001\002\000\006" +
    "\006\220\042\221\001\002\000\004\031\245\001\002\000" +
    "\004\042\236\001\002\000\004\016\222\001\002\000\004" +
    "\043\223\001\002\000\004\037\224\001\002\000\006\027" +
    "\041\042\042\001\002\000\004\037\226\001\002\000\006" +
    "\026\231\042\230\001\002\000\004\031\uffc8\001\002\000" +
    "\006\025\233\026\234\001\002\000\004\042\232\001\002" +
    "\000\004\031\uffc5\001\002\000\004\043\235\001\002\000" +
    "\004\031\uffc6\001\002\000\004\031\uffc7\001\002\000\004" +
    "\016\237\001\002\000\004\043\240\001\002\000\004\037" +
    "\241\001\002\000\006\027\041\042\042\001\002\000\004" +
    "\037\243\001\002\000\006\026\231\042\230\001\002\000" +
    "\004\031\uffc9\001\002\000\004\032\246\001\002\000\030" +
    "\005\022\006\027\007\023\010\030\011\033\013\034\014" +
    "\035\015\014\020\032\032\025\042\020\001\002\000\032" +
    "\005\022\006\027\007\023\010\030\011\033\013\034\014" +
    "\035\015\014\020\032\032\025\033\250\042\020\001\002" +
    "\000\034\005\uffca\006\uffca\007\uffca\010\uffca\011\uffca\013" +
    "\uffca\014\uffca\015\uffca\020\uffca\032\uffca\033\uffca\035\uffca" +
    "\042\uffca\001\002\000\004\002\001\001\002\000\004\031" +
    "\253\001\002\000\004\032\254\001\002\000\030\005\022" +
    "\006\027\007\023\010\030\011\033\013\034\014\035\015" +
    "\014\020\032\032\025\042\020\001\002\000\032\005\022" +
    "\006\027\007\023\010\030\011\033\013\034\014\035\015" +
    "\014\020\032\032\025\033\256\042\020\001\002\000\004" +
    "\002\uffff\001\002\000\032\005\022\006\027\007\023\010" +
    "\030\011\033\013\034\014\035\015\014\020\032\032\025" +
    "\033\274\042\020\001\002\000\004\042\261\001\002\000" +
    "\004\005\262\001\002\000\004\040\263\001\002\000\016" +
    "\005\172\020\174\027\173\032\264\034\265\043\171\001" +
    "\002\000\030\005\022\006\027\007\023\010\030\011\033" +
    "\013\034\014\035\015\014\020\032\032\025\042\020\001" +
    "\002\000\030\005\022\006\027\007\023\010\030\011\033" +
    "\013\034\014\035\015\014\020\032\032\025\042\020\001" +
    "\002\000\032\005\022\006\027\007\023\010\030\011\033" +
    "\013\034\014\035\015\014\020\032\032\025\035\267\042" +
    "\020\001\002\000\004\033\270\001\002\000\004\002\ufffd" +
    "\001\002\000\032\005\022\006\027\007\023\010\030\011" +
    "\033\013\034\014\035\015\014\020\032\032\025\033\272" +
    "\042\020\001\002\000\004\033\273\001\002\000\004\002" +
    "\ufffc\001\002\000\004\002\ufffe\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\272\000\004\002\005\001\001\000\022\003\256\004" +
    "\016\006\020\007\023\010\014\011\030\012\035\015\025" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\003\015\004\016\006\020\007\023\010\014\011" +
    "\030\012\035\015\025\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\004\056\006\057\007\061\010\055\011" +
    "\063\012\064\015\062\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\003\145\004\016\006\020" +
    "\007\023\010\014\011\030\012\035\015\025\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\013\037" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\003\054\004\016\006\020\007\023\010\014\011\030\012" +
    "\035\015\025\001\001\000\020\004\056\006\057\007\061" +
    "\010\055\011\063\012\064\015\062\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\003\066\004\016\006\020\007\023" +
    "\010\014\011\030\012\035\015\025\001\001\000\020\004" +
    "\056\006\057\007\061\010\055\011\063\012\064\015\062" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\013" +
    "\072\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\013\076\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\003\101\004\016\006\020\007\023" +
    "\010\014\011\030\012\035\015\025\001\001\000\020\004" +
    "\056\006\057\007\061\010\055\011\063\012\064\015\062" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\003" +
    "\105\004\016\006\020\007\023\010\014\011\030\012\035" +
    "\015\025\001\001\000\020\004\056\006\057\007\061\010" +
    "\055\011\063\012\064\015\062\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\004\056\006\057\007\061\010\055" +
    "\011\063\012\064\015\062\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\014\216\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\013\224\001" +
    "\001\000\002\001\001\000\004\005\226\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\013\241\001\001\000\002\001\001\000\004\005\243" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\003" +
    "\246\004\016\006\020\007\023\010\014\011\030\012\035" +
    "\015\025\001\001\000\020\004\056\006\057\007\061\010" +
    "\055\011\063\012\064\015\062\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\003\254\004\016\006\020\007\023\010\014\011\030" +
    "\012\035\015\025\001\001\000\020\004\056\006\057\007" +
    "\061\010\055\011\063\012\064\015\062\001\001\000\002" +
    "\001\001\000\020\004\056\006\057\007\061\010\055\011" +
    "\063\012\064\015\062\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\003" +
    "\270\004\016\006\020\007\023\010\014\011\030\012\035" +
    "\015\025\001\001\000\022\003\265\004\016\006\020\007" +
    "\023\010\014\011\030\012\035\015\025\001\001\000\020" +
    "\004\056\006\057\007\061\010\055\011\063\012\064\015" +
    "\062\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\004\056\006\057\007\061\010\055\011\063\012\064\015" +
    "\062\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;
    
    public void syntax_error(Symbol s){
        this.s = s;
    }

    public Symbol getS(){
        return this.s;
}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintax$actions {
  private final Sintax parser;

  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // DECLARACION_FOR ::= Op_incremento Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // DECLARACION_FOR ::= Identificador Op_incremento 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // DECLARACION_FOR ::= Identificador Op_atribucion Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // SENTENCIA_FOR ::= Identificador Igual Numero P_coma SENTENCIA_BOOLEANA P_coma DECLARACION_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // SENTENCIA_FOR ::= T_dato Identificador Igual Numero P_coma SENTENCIA_BOOLEANA P_coma DECLARACION_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // FOR ::= For Parentesis_a SENTENCIA_FOR Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // DO_WHILE ::= Do Llave_a SENTENCIA Llave_c While Parentesis_a SENTENCIA_BOOLEANA Parentesis_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DO_WHILE",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // WHILE ::= While Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("WHILE",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // IF_ELSE ::= If Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_a SENTENCIA Llave_c Else Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_ELSE",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Comillas Identificador Comillas 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Comillas Comillas 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Op_booleano 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // SENTENCIA_BOOLEANA ::= Op_booleano 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // groupJSON ::= Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("groupJSON",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // groupJSON ::= Llave_a SENTENCIA Llave_c Coma_Simple 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("groupJSON",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // IF ::= If Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // DECLARACION ::= Comillas Identificador Comillas Dos_Puntos Resta Numero Coma_Simple 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // DECLARACION ::= Comillas Identificador Comillas Dos_Puntos Op_booleano Coma_Simple 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // DECLARACION ::= Comillas Identificador Comillas Dos_Puntos Numero Coma_Simple 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // DECLARACION ::= Comillas Identificador Comillas Dos_Puntos Comillas Identificador Comillas Coma_Simple 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // DECLARACION ::= Identificador Dos_Puntos Op_booleano Coma_Simple 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // DECLARACION ::= Identificador Dos_Puntos Comillas Identificador Comillas Coma_Simple 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // DECLARACION ::= Identificador Dos_Puntos Numero Coma_Simple 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // DECLARACION ::= Cadena Identificador Igual Comillas Identificador Comillas Coma_Simple 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // DECLARACION ::= Cadena Identificador Igual Comillas Identificador Comillas P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // DECLARACION ::= Cadena Identificador Op_atribucion Comillas Identificador Comillas P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // DECLARACION ::= Cadena Identificador Igual Comillas Comillas P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // DECLARACION ::= Cadena Identificador Op_atribucion Comillas Comillas P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // DECLARACION ::= T_dato Op_incremento Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // DECLARACION ::= T_dato Identificador Op_incremento P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // DECLARACION ::= T_dato Identificador Igual Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // DECLARACION ::= T_dato Identificador Op_atribucion Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // DECLARACION ::= T_dato Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // DECLARACION ::= Int Op_incremento Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // DECLARACION ::= Int Identificador Op_incremento P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // DECLARACION ::= Int Identificador Igual Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // DECLARACION ::= Int Identificador Op_atribucion Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // DECLARACION ::= Int Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // DECLARACION ::= Resta Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // SENTENCIA ::= groupJSON 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // SENTENCIA ::= SENTENCIA groupJSON 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // SENTENCIA ::= FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // SENTENCIA ::= SENTENCIA FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // SENTENCIA ::= DO_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // SENTENCIA ::= SENTENCIA DO_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // SENTENCIA ::= WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // SENTENCIA ::= SENTENCIA WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // SENTENCIA ::= IF_ELSE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // SENTENCIA ::= SENTENCIA IF_ELSE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // SENTENCIA ::= IF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // SENTENCIA ::= SENTENCIA IF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // SENTENCIA ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // SENTENCIA ::= SENTENCIA DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // INICIO ::= Llave_a Comillas Identificador Comillas Dos_Puntos Llave_a SENTENCIA Llave_c Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INICIO ::= Llave_a Comillas Identificador Comillas Dos_Puntos Corchete_a SENTENCIA Corchete_c Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INICIO ::= Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= Main Parentesis_a Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= Int Main Parentesis_a Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

